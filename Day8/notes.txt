
# Day 8 – AWK Basics

## Introduction
**AWK** is a powerful text-processing language used to manipulate data and generate reports. It is widely used in Linux/Unix environments, especially in **DevOps** for log parsing, system monitoring, and automation scripts.

## AWK Basics

### Syntax


 pattern → Condition to match lines (optional)
  action` → What to do with the matched lines
*filename` → File to process

Example:

```bash
awk '{ print $1 }' file.txt
```

Prints the **first column** of each line.

---

### Fields and Records

* **Fields**: Columns in a file, referenced by `$1`, `$2`, `$3`, etc.
* **Record**: A row in the file.
* `$0` → Represents the entire line.

Example:

```bash
awk '{ print $1, $3 }' file.txt
```

Prints the **1st and 3rd columns** of each line.

---

### NR and NF

* **NR** → Number of the current record (line number)
* **NF** → Number of fields in the current record

Example:

```bash
awk 'NR==3 { print $0 }' file.txt
```

Prints the **3rd line** of the file.

```bash
awk '{ print NF }' file.txt
```

Prints the **number of columns** in each line.

---

### Using Conditions

```bash
awk '$2 > 100 { print $1, $2 }' file.txt
```

Prints lines where the **2nd column is greater than 100**.

---

### Loops in AWK

**For Loop:**

```bash
awk '{ for(i=1; i<=NF; i++) print $i }' file.txt
```

Prints **all fields of each line** one by one.

**While Loop:**

```bash
awk '{ i=1; while(i<=NF) { print $i; i++ } }' file.txt
```

---

### Built-in Variables

| Variable  | Meaning                            |
| --------- | ---------------------------------- |
| `NR`      | Current line number                |
| `NF`      | Number of fields in the line       |
| `$0`      | Entire line                        |
| `$1, $2…` | Specific columns                   |
| `FS`      | Field separator (default is space) |
| `OFS`     | Output field separator             |

Example:

```bash
awk 'BEGIN { FS=":"; OFS=" | " } { print $1, $3 }' /etc/passwd
```

* `FS=":"` → Split columns using `:`
* `OFS=" | "` → Output columns separated by `|`

---

### Field Separator (-F)

```bash
awk -F, '{ print $1, $3 }' file.csv
```

* `-F,` → Sets **comma** as the field separator
* Prints 1st and 3rd columns from a CSV file.

---

### AWK with Pipes

You can use AWK with other Linux commands:

```bash
cat file.txt | awk '{ print $2 }'
ps aux | awk '$3>50 { print $1, $3 }'
```

* Example: Print processes using more than 50% CPU.

---

### BEGIN and END Blocks

* `BEGIN` → Executed **before processing** the file
* `END` → Executed **after processing** the file

Example:

```bash
awk 'BEGIN { print "Start" } { print $1 } END { print "End" }' file.txt
```

---

### Practical Examples for DevOps

1. **Print IP addresses from a log file**

```bash
awk '{ print $1 }' access.log
```

2. **Filter log entries by date/time**

```bash
awk '$2 >= "08:51:00" && $2 <= "08:51:03" { print $0 }' app.log
```

3. **Count lines in a file**


awk 'END { print NR }' file.txt

4. **Sum values in a column**

awk '{ sum += $3 } END { print sum }' file.txt

# Tips for DevOps

* AWK is often used for **log analysis** and **monitoring scripts**.
* Combine AWK with **grep, sed, and shell scripts** for automation.
* Practice parsing **system files** like `/etc/passwd`, `/var/log/syslog`, and web server logs.
* Learn **regular expressions** for advanced pattern matching in AWK.



```

---

If you want, I can also give you **the exact commands to add this file to GitHub** from your current repo without breaking anything.  

Do you want me to do that?
```
